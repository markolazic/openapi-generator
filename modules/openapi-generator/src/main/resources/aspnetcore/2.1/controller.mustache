using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using {{packageName}}.Attributes;
using {{packageName}}.Models;

namespace {{packageName}}.Controllers
{ {{#operations}}
    /// <summary>
    /// {{description}}
    /// </summary>{{#description}}
    [Description("{{description}}")]{{/description}}
    [ApiController]
    public class {{classname}}Controller : ControllerBase
    {
        private readonly I{{classname}}Service svc;
        public {{classname}}Controller(I{{classname}}Service svc)
        {
            this.svc = svc;
        }
        
         {{#operation}}
        /// <summary>
        /// {{#summary}}{{summary}}{{/summary}}
        /// </summary>{{#notes}}
        /// <remarks>{{notes}}</remarks>{{/notes}}{{#allParams}}
        /// <param name="{{paramName}}">{{description}}</param>{{/allParams}}{{#responses}}
        /// <response code="{{code}}">{{message}}</response>{{/responses}}
        [{{httpMethod}}]
        [Route("{{{basePathWithoutHost}}}{{{path}}}")]
        public {{#asyncServer}}await Task<IActionResult>{{/asyncServer}}
        {{^asyncServer}}IActionResult{{/asyncServer}} {{operationId}}(
            {{#allParams}}{{>pathParam}}{{>queryParam}}{{>bodyParam}}{{>formParam}}{{>headerParam}}{{#hasMore}}, 
            {{/hasMore}}{{/allParams}})
        {
            {{#isGet}}
            var result = return {{#asyncServer}}await {{/asyncServer}}service.{{operationId}}({{#allParams}}{{paramName}}{{#hasMore}}, {{/hasMore}}{{/allParams}});
            if(result == null)
                return NotFound();

            return Ok(result);{{/isGet}}{{#isPost}}
            var result = return {{#asyncServer}}await {{/asyncServer}}service.{{operationId}}({{#allParams}}{{paramName}}{{#hasMore}}, {{/hasMore}}{{/allParams}});
            if(result == null)
                return UnprocessableEntity();

            return Created(result);{{/isPost}}{{#isDelete}}
            var error = return {{#asyncServer}}await {{/asyncServer}}service.{{operationId}}({{#allParams}}{{paramName}}{{#hasMore}}, {{/hasMore}}{{/allParams}});
            if(error != null)
                return UnprocessableEntity(error); //???

            return NoContent();{{/isDelete}}{{#isPut}}
            var error = return {{#asyncServer}}await {{/asyncServer}}service.{{operationId}}({{#allParams}}{{paramName}}{{#hasMore}}, {{/hasMore}}{{/allParams}});
            if(error != null)
                return UnprocessableEntity(error); //???

            return NoContent();{{/isPut}}{{#isPatch}}
            var error = return {{#asyncServer}}await {{/asyncServer}}service.{{operationId}}({{#allParams}}{{paramName}}{{#hasMore}}, {{/hasMore}}{{/allParams}});
            if(error != null)
                return UnprocessableEntity(error); //???

            return NoContent();{{/isPatch}}         
        }
        {{/operation}}
    }

    public interface I{{classname}}Service
    {        
        {{#operation}}/// <summary>
        /// {{notes}}
        /// </summary>
        /// <param name="context">Context of request</param>
        {{#allParams}}/// <param name="{{paramName}}">{{description}}{{^required}} (optional{{#defaultValue}}, default to {{.}}{{/defaultValue}}){{/required}}</param>
        {{/allParams}}/// <returns>{{#returnType}}{{returnType}}{{/returnType}}</returns>
        {{#asyncServer}}{{#returnType}}Task<{{{returnType}}}>{{/returnType}}{{^returnType}}Task{{/returnType}}{{/asyncServer}}{{^asyncServer}}{{#returnType}}{{&returnType}}{{/returnType}}{{^returnType}}void{{/returnType}}{{/asyncServer}} {{operationId}}({{>paramsList}});{{#hasMore}}

        {{/hasMore}}{{/operation}}
    }

{{/operations}}
}

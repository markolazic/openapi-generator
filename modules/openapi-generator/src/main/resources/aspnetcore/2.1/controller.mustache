using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using System.ComponentModel.DataAnnotations;
using Optional;
using Optional.Extensions.AspNetCore;
using FluentValidation;
using {{packageName}}.Helpers;
using {{packageName}}.Models;


namespace {{packageName}}.Controllers
{ {{#operations}}
    /// <summary>
    /// {{description}}
    ///</summary>
    {{#description}}[Description("{{description}}")]{{/description}}
    [ApiController]
    [Route("{{{basePathWithoutHost}}}")]
    public class {{classname}} : ControllerBase
    {
        private readonly I{{classname}}Service service;
        private readonly OpenApiRuntimeExpressionInterpreter runtimeExpressionInterpreter;
        public {{classname}}(I{{classname}}Service service, OpenApiRuntimeExpressionInterpreter runtimeExpressionInterpreter)
        {
            this.service = service;
            this.runtimeExpressionInterpreter = runtimeExpressionInterpreter;
        }

{{#operation}}
        [{{httpMethod}}]
        [Route("{{{path}}}", Name = "{{operationId}}")]
        public {{#asyncServer}}await Task<IActionResult>
            {{/asyncServer}}{{^asyncServer}}IActionResult{{/asyncServer}} {{operationId}}({{#allParams}}{{>pathParam}}{{>queryParam}}{{>bodyParam}}{{>formParam}}{{>headerParam}}{{#hasMore}}, {{/hasMore}}{{/allParams}})
        { {{#isGet}}
            return {{#asyncServer}}await {{/asyncServer}}service.{{operationId}}({{#allParams}}{{paramName}}{{#hasMore}}, {{/hasMore}}{{/allParams}}).ToOkOrError();
            {{/isGet}}{{#isPost}}
            return {{#asyncServer}}await {{/asyncServer}}service.{{operationId}}({{#allParams}}{{paramName}}{{#hasMore}}, {{/hasMore}}{{/allParams}}).ToCreatedOrError("{{createdAtUrl}}", returned => runtimeExpressionInterpreter.GetValue(returned, "{{resourceCreatedAtId}}"));
            {{/isPost}}{{#isDelete}}
            return {{#asyncServer}}await {{/asyncServer}}service.{{operationId}}({{#allParams}}{{paramName}}{{#hasMore}}, {{/hasMore}}{{/allParams}}).ToNoContentOrError();
            {{/isDelete}}{{#isPut}}
            var error = {{#asyncServer}}await {{/asyncServer}}service.{{operationId}}({{#allParams}}{{paramName}}{{#hasMore}}, {{/hasMore}}{{/allParams}});
            if(error != null)
            return UnprocessableEntity(error); //???

            return NoContent();{{/isPut}}{{#isPatch}}
            return {{#asyncServer}}await {{/asyncServer}}service.{{operationId}}({{#allParams}}{{paramName}}{{#hasMore}}, {{/hasMore}}{{/allParams}}).ToNoContentOrError();{{/isPatch}}
        }
{{/operation}}
    }

    public interface I{{classname}}Service
    {
        {{#operation}}
        {{#asyncServer}}{{#returnType}}Task<{{{returnType}}}>{{/returnType}}{{^returnType}}Task{{/returnType}}{{/asyncServer}}
        {{^asyncServer}}{{#returnType}}Option<{{&returnType}}, ErrorCode>{{/returnType}}{{^returnType}}void{{/returnType}}{{/asyncServer}}{{operationId}}({{>paramsList}});{{#hasMore}}
            {{/hasMore}}{{/operation}}
    }

    {{/operations}}
}
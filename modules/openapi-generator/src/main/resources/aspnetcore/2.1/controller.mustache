using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using System.ComponentModel.DataAnnotations;
using Optional;
using Optional.Extensions.AspNetCore;
using FluentValidation;
using {{packageName}}.Helpers;
using {{packageName}}.Models;


namespace {{packageName}}.Controllers
{ {{#operations}}
    /// <summary>
    /// {{description}}
    ///</summary>
    {{#description}}[Description("{{description}}")]{{/description}}
    [ApiController]
    [Route("{{{basePathWithoutHost}}}")]
    public class {{classname}} : ControllerBase
    {
        private readonly I{{classname}}Service service;
        public {{classname}}(I{{classname}}Service service)
        {
            this.service = service;
        }

{{#operation}}
        [{{httpMethod}}]
        [Route("{{{path}}}", Name = "{{operationId}}")]
        public {{#asyncServer}}Task<IActionResult>{{/asyncServer}}{{^asyncServer}}IActionResult{{/asyncServer}} {{operationId}}({{#allParams}}{{>pathParam}}{{>queryParam}}{{>bodyParam}}{{>formParam}}{{>headerParam}}{{#hasMore}}, {{/hasMore}}{{/allParams}})
        {
            return {{#asyncServer}}await {{/asyncServer}}service.{{operationId}}({{#allParams}}{{paramName}}{{#hasMore}}, {{/hasMore}}{{/allParams}});
        }
{{/operation}}
    }

    public interface I{{classname}}Service
    {
{{#operation}}
        /// <summary>
        /// Returns <see cref="{{returnType}}"/> in happy-path in body. Returns <see cref="{{&returnErrorType}}"/> on error.
        /// </summary>
        {{#asyncServer}}Task<IActionResult>{{/asyncServer}}{{^asyncServer}}IActionResult{{/asyncServer}} {{operationId}}({{>paramsList}});{{#hasMore}}
            {{/hasMore}}
{{/operation}}
    }

    {{/operations}}
}